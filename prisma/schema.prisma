generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)

    accounts     Account[]
    sessions     Session[]
    cartProducts CartProduct[]
    Product      Product[]
    reviews      Review[]

    @@index([email])
}

model Product {
    id           String        @id @default(cuid())
    productTitle String
    description  String
    image        String?
    price        Int
    createdById  String
    status       Status
    category     Category
    tag          Tag
    color        Color
    cartProduct  CartProduct[]
    review       Review[]

    createdBy User @relation(fields: [createdById], references: [id])

    @@index([category])
}

model Review {
    id        String   @id @default(cuid())
    text      String
    date      DateTime @default(now())
    name      String
    rating    Float
    productId String
    userId    String

    Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    User    User    @relation(fields: [userId], references: [id])
}

model CartProduct {
    id        String @id @default(cuid())
    userId    String
    productId String

    User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    Product Product @relation(fields: [productId], references: [id])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Enums
enum Role {
    USER
    ADMIN
}

enum Color {
    Black
    White
    Red
    Brown
    Green
}

enum Category {
    Chair
    Table
    Lamp
    Drawer
    Bed
    Bookshelf
    Sofa
}

enum Tag {
    Minimalistic
    Modern
    Stylish
    Elegant
    Ambient
    Luxurious
}

enum Status {
    Regular
    New
    Popular
    Out_of_stock
}
